# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# Destroy Function is added as per the Requested Use Case
# It created AKS and resources for DEV UAT and PROD Environment

name: 'Deploy-Infrastructure-TerraformIAC'

on:
  workflow_dispatch:
    inputs:
      #Name of your Environment
      ENVIRONMENT:
        description: 'Deployment Environment (Non-Prod/Pre-Prod/Prod)'
        required: true
        default: 'Non-Prod'
      CreateWorkspace:
        description: 'First Time Run -->Choose Yes'
        required: true
        default: 'no'
jobs:
  Create-Workspace:
    if: ${{ github.event.inputs.CreateWorkspace == 'Yes' }}
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform init
    - name: Terraform Create Workspace
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform workspace new dev
        terraform workspace new uat
        terraform workspace new prod
         
  Deploy-DEV:
    if: ${{ github.event.inputs.ENVIRONMENT == 'Non-Prod' }}
    runs-on: ubuntu-latest
    environment: 'dev'
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
      #run: |
        #cd "$GITHUB_WORKSPACE/TerraformIAC/"
        #terraform fmt -check
    
    - name: Terraform seletc the Workspace
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform workspace select dev
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
       cd "$GITHUB_WORKSPACE/TerraformIAC/"
       
       terraform plan -var-file dev.tfvars

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: |
       cd "$GITHUB_WORKSPACE/TerraformIAC/"
       terraform apply -auto-approve -var-file dev.tfvars
       
#     - name: Terraform destroy
#       run: |
#        cd "$GITHUB_WORKSPACE/TerraformIAC/"
#        terraform apply -destroy -var-file dev.tfvars -auto-approve
   
  Deploy-UAT:
    runs-on: 'ubuntu-latest'
    if: ${{ github.event.inputs.ENVIRONMENT == 'Pre-Prod' }}
    environment: 'uat'
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform init
    
    - name: Terraform list Workspace
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform workspace select uat
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
       cd "$GITHUB_WORKSPACE/TerraformIAC/"
       terraform plan -var-file uat.tfvars

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: |
       cd "$GITHUB_WORKSPACE/TerraformIAC/"
       terraform apply -auto-approve -var-file uat.tfvars
      
#     - name: Terraform destroy
#       run: |
#        cd "$GITHUB_WORKSPACE/TerraformIAC/"
#        terraform apply -destroy -var-file uat.tfvars -auto-approve
       
  Deploy-PROD:
    runs-on: 'ubuntu-latest'
    if: ${{ github.event.inputs.ENVIRONMENT == 'Prod' }}
    environment: 'prod'
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform init
    
    - name: Terraform list Workspace
      run: |
        cd "$GITHUB_WORKSPACE/TerraformIAC/"
        terraform workspace select prod
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
       cd "$GITHUB_WORKSPACE/TerraformIAC/"
       terraform plan -var-file prod.tfvars

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: |
       cd "$GITHUB_WORKSPACE/TerraformIAC/"
       terraform apply -auto-approve -var-file prod.tfvars
    
#     - name: Terraform destroy
#       run: |
#        cd "$GITHUB_WORKSPACE/TerraformIAC/"
#        terraform apply -destroy -var-file prod.tfvars -auto-approve
   
